name: Deploy to Production

on:
  push:
    branches: [ main ]
  workflow_dispatch:

env:
  PROJECT_ID: uws-gaming
  GAR_LOCATION: us-central1
  REPOSITORY: uws-gaming-repo
  REGION: us-central1

jobs:
  test:
    name: Run Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci --legacy-peer-deps

      - name: Run linting
        run: npm run lint --if-present

      - name: Run tests
        run: npm run test --if-present

      - name: Build packages
        run: npm run build:packages

  deploy:
    name: Deploy to Production
    needs: test
    permissions:
      contents: read
      id-token: write

    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Google Auth
        id: auth
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: '${{ secrets.GCP_SA_KEY }}'

      - name: 'Set up Cloud SDK'
        uses: 'google-github-actions/setup-gcloud@v2'

      - name: 'Use gcloud CLI'
        run: 'gcloud info'

      - name: Configure Docker to use gcloud as a credential helper
        run: |
          gcloud --quiet auth configure-docker $GAR_LOCATION-docker.pkg.dev

      - name: Create Artifact Registry repository (if not exists)
        run: |
          gcloud artifacts repositories create $REPOSITORY \
            --repository-format=docker \
            --location=$GAR_LOCATION \
            --description="UWS Gaming Docker repository" || true

      - name: Run Database Migrations
        run: |
          # Install dependencies for Prisma
          npm ci --legacy-peer-deps

          # Run database migrations
          cd packages/database
          echo "DATABASE_URL=$(gcloud secrets versions access latest --secret=uws-gaming-database-url)" > .env
          npx prisma migrate deploy

      - name: Build and Push Frontend
        run: |
          docker build -f apps/frontend/Dockerfile -t $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/frontend:$GITHUB_SHA .
          docker push $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/frontend:$GITHUB_SHA

      - name: Build and Push Backend
        run: |
          docker build -f apps/backend/Dockerfile -t $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/backend:$GITHUB_SHA .
          docker push $GAR_LOCATION-docker.pkg.dev/$PROJECT_ID/$REPOSITORY/backend:$GITHUB_SHA

      - name: Deploy Frontend to Cloud Run
        id: deploy-frontend
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: uwsgaming-frontend
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/frontend:${{ github.sha }}
          flags: |
            --allow-unauthenticated
            --port=3000
            --memory=1Gi
            --cpu=1
            --min-instances=0
            --max-instances=10
            --set-cloudsql-instances=${{ env.PROJECT_ID }}:${{ env.REGION }}:uws-gaming-db
          env_vars: |
            NODE_ENV=production
            NEXT_PUBLIC_ENV=production
            NEXT_PUBLIC_DOMAIN=uwsgaming.org
            NEXT_PUBLIC_API_URL=https://api.uwsgaming.org
            NEXT_PUBLIC_APP_NAME=UWS Gaming
            NEXT_PUBLIC_APP_VERSION=0.1.0
            NEXT_PUBLIC_MAINTENANCE_MODE=false
            NEXT_PUBLIC_ENABLE_ANALYTICS=true
            NEXT_PUBLIC_ENABLE_ERROR_REPORTING=true
            NEXTAUTH_URL=https://uwsgaming.org
          secrets: |
            DATABASE_URL=uws-gaming-database-url:latest
            JWT_SECRET=uws-gaming-jwt-secret:latest
            NEXTAUTH_SECRET=uws-gaming-nextauth-secret:latest

      - name: Deploy Backend to Cloud Run
        id: deploy-backend
        uses: google-github-actions/deploy-cloudrun@v2
        with:
          service: uwsgaming-backend
          region: ${{ env.REGION }}
          image: ${{ env.GAR_LOCATION }}-docker.pkg.dev/${{ env.PROJECT_ID }}/${{ env.REPOSITORY }}/backend:${{ github.sha }}
          flags: |
            --allow-unauthenticated
            --port=4000
            --memory=1Gi
            --cpu=1
            --min-instances=0
            --max-instances=10
            --set-cloudsql-instances=${{ env.PROJECT_ID }}:${{ env.REGION }}:uws-gaming-db
          env_vars: |
            NODE_ENV=production
            API_PORT=4000
            API_HOST=0.0.0.0
            API_CORS_ORIGIN=https://uwsgaming.org
          secrets: |
            DATABASE_URL=uws-gaming-database-url:latest
            JWT_SECRET=uws-gaming-jwt-secret:latest

      - name: Map Custom Domains
        run: |
          # Map custom domains to Cloud Run services
          gcloud run domain-mappings create --service=uwsgaming-frontend --domain=uwsgaming.org --region=$REGION || true
          gcloud run domain-mappings create --service=uwsgaming-frontend --domain=www.uwsgaming.org --region=$REGION || true
          gcloud run domain-mappings create --service=uwsgaming-backend --domain=api.uwsgaming.org --region=$REGION || true

      - name: Update DNS Records
        run: |
          # Get the Cloud Run service URLs
          FRONTEND_URL=$(gcloud run services describe uwsgaming-frontend --region=$REGION --format="value(status.url)")
          BACKEND_URL=$(gcloud run services describe uwsgaming-backend --region=$REGION --format="value(status.url)")

          echo "Frontend URL: $FRONTEND_URL"
          echo "Backend URL: $BACKEND_URL"

          # Update DNS records to point to Cloud Run
          # Get the IP address that Cloud Run domain mapping provides
          echo "Custom domains mapped - DNS should propagate automatically"

      - name: Show Live URLs
        run: |
          echo "üöÄ Deployment completed successfully!"
          echo "üåê Production URLs:"
          echo "   Frontend: https://uwsgaming.org"
          echo "   Backend API: https://api.uwsgaming.org"
          echo "üìä Cloud Run Services:"
          echo "   Frontend: $(gcloud run services describe uwsgaming-frontend --region=$REGION --format='value(status.url)')"
          echo "   Backend: $(gcloud run services describe uwsgaming-backend --region=$REGION --format='value(status.url)')"
