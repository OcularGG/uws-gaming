// Development schema for PostgreSQL - local development version
// This matches production schema for consistent development experience

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User management - includes email-based authentication
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String   // Hashed password
  discordId String?  @unique // Keep for migration purposes, make optional
  role      String   @default("user") // user, admin, moderator
  emailVerified Boolean @default(false)
  emailVerificationToken String?
  passwordResetToken String?
  passwordResetExpires DateTime?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  sessions   Session[]
  applications Application[]
  applicationVouches ApplicationVouch[]
  applicationCooldown ApplicationCooldown?
  bugReports BugReport[]

  @@map("users")
}

// Session management for authentication
model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Applications - updated to use email-based auth
model Application {
  id        String   @id @default(cuid())
  userId    String
  status    String   @default("PENDING") // ApplicationStatus as string

  // User info (no longer Discord-specific)
  applicantName   String   // captainName from form
  email          String

  // Application form data
  captainName              String
  preferredNickname        String?
  currentNation            String
  timeZone                 String
  hoursInNavalAction       Int
  steamConnected           Boolean
  currentRank              String
  previousCommands         String?
  preferredRole            String
  isPortBattleCommander    Boolean
  commanderExperience      String?
  isCrafter                Boolean
  weeklyPlayTime           Int
  portBattleAvailability   String  // JSON string of array
  typicalSchedule          String
  declarationAccuracy      Boolean
  declarationHonor         Boolean
  declarationRules         Boolean
  signature                String

  // Remove Discord-specific fields
  // discordChannelId and applicationEmbed removed

  // Timestamps
  submittedAt DateTime @default(now())
  reviewedAt  DateTime?
  updatedAt   DateTime @updatedAt

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  vouches ApplicationVouch[]

  @@map("applications")
}

// Application vouches
model ApplicationVouch {
  id            String   @id @default(cuid())
  applicationId String
  reviewerId    String
  isPositive    Boolean
  comment       String?
  createdAt     DateTime @default(now())

  // Relationships
  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  reviewer    User        @relation(fields: [reviewerId], references: [id], onDelete: Cascade)

  @@unique([applicationId, reviewerId])
  @@map("application_vouches")
}

// Application cooldowns - updated to use user IDs
model ApplicationCooldown {
  id             String    @id @default(cuid())
  userId         String    @unique // Changed from discordId to userId
  canReapplyAt   DateTime
  reason         String
  overriddenBy   String?
  overriddenAt   DateTime?
  createdAt      DateTime  @default(now())

  // Relationship
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("application_cooldowns")
}

// Bug reports - simplified for SQLite
model BugReport {
  id          String   @id @default(cuid())
  title       String
  description String
  severity    String   @default("MEDIUM") // BugSeverity as string
  status      String   @default("OPEN")   // BugStatus as string
  reporterId  String
  assigneeId  String?

  // Additional info (simplified)
  stepsToReproduce String?
  expectedBehavior String?
  actualBehavior   String?
  environment      String?
  attachments      String? // File paths as JSON string

  // Timestamps
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  reporter User  @relation(fields: [reporterId], references: [id], onDelete: Cascade)

  @@map("bug_reports")
}

// Gallery items - simplified for SQLite
model GalleryItem {
  id          String   @id @default(cuid())
  title       String
  description String?
  filePath    String
  fileName    String
  fileSize    Int?
  mimeType    String?
  dimensions  String?  // JSON as string instead of Json type
  tags        String?  // Comma-separated instead of String[]
  upvotes     Int      @default(0)
  downvotes   Int      @default(0)
  isPublic    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("gallery_items")
}
