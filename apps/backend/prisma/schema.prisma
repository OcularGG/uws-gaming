// Backend PostgreSQL schema
// This schema is aligned with the frontend for consistency

generator client {
  provider = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User management
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  username  String   @unique
  password  String?  // Hashed password for local auth
  discordId String?  @unique
  firstName String?
  lastName  String?
  isActive  Boolean  @default(true)
  isApproved Boolean @default(false) // Must be approved through application process
  canCreatePortBattles Boolean @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  sessions   Session[]
  userRoles  UserRole[]
  activities UserActivity[]
  applications Application[]
  applicationVouches ApplicationVouch[]
  bugReports BugReport[]
  createdPortBattles PortBattle[] @relation("PortBattleCreator")
  portBattleSignups PortBattleSignup[]
  screeningSignups ScreeningSignup[]
  userStrikes UserStrike[]
  commandRoles CommandStructureRole[]

  @@map("users")
}

// Role-based access control
model Role {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  permissions Json     @default("[]")
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  userRoles UserRole[]

  @@map("roles")
}

model UserRole {
  id     String @id @default(cuid())
  userId String
  roleId String

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  role Role @relation(fields: [roleId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model UserActivity {
  id        String   @id @default(cuid())
  userId    String
  type      String   // UserActivityType as string
  data      Json     @default("{}")
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_activities")
}

// Session management for authentication
model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

// Applications - email-based system
model Application {
  id        String   @id @default(cuid())

  // Applicant information
  applicantName String
  discordUsername String?
  discordId String?
  email String?

  // Status and review
  status String @default("pending") // pending, approved, rejected, withdrawn
  submittedAt DateTime @default(now())
  reviewedAt DateTime?
  reviewedBy String?
  reviewNotes String?

  // Discord integration
  discordChannelId String? // Application channel ID
  interviewChannelId String? // Interview voice channel ID

  // Personal Particulars
  captainName String
  preferredNickname String?
  currentNation String
  timeZone String

  // Naval Experience
  hoursInNavalAction Int
  steamConnected Boolean @default(false)
  currentRank String
  previousCommands String?
  preferredRole String
  isPortBattleCommander Boolean @default(false)
  commanderExperience String?

  // Crafting & Availability
  isCrafter Boolean @default(false)
  weeklyPlayTime Int
  portBattleAvailability String[]
  typicalSchedule String

  // Declarations & Signature
  declarationAccuracy Boolean
  declarationHonor Boolean
  declarationRules Boolean
  signature String

  // Relationships
  user User? @relation(fields: [discordId], references: [discordId])
  attachments ApplicationAttachment[]
  vouches ApplicationVouch[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("applications")
}

// Application attachments
model ApplicationAttachment {
  id String @id @default(cuid())
  applicationId String
  filename String
  originalFilename String
  fileSize BigInt
  mimeType String
  storagePath String
  createdAt DateTime @default(now())

  // Relationships
  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)

  @@map("application_attachments")
}

// Application vouches
model ApplicationVouch {
  id String @id @default(cuid())
  applicationId String
  reviewerId String
  reviewerName String
  vouchType String // positive, negative
  comments String?
  createdAt DateTime @default(now())

  // Relationships
  application Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  reviewer User @relation(fields: [reviewerId], references: [id])

  @@unique([applicationId, reviewerId])
  @@map("application_vouches")
}

// Bug reports and feedback
model BugReport {
  id String @id @default(cuid())
  title String
  description String
  severity String @default("medium") // low, medium, high, critical
  status String @default("open") // open, in-progress, resolved, closed
  reportedBy String
  assignedTo String?
  tags String[]
  steps String[]
  expectedBehavior String?
  actualBehavior String?
  environment String? // browser, OS, etc.
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  reporter User @relation(fields: [reportedBy], references: [id])

  @@map("bug_reports")
}

// Port Battle system
model PortBattle {
  id String @id @default(cuid())
  title String
  description String?
  location String
  scheduledDate DateTime
  duration Int @default(90) // minutes
  maxParticipants Int @default(25)
  requiredBR Int? // Battle Rating requirement
  status String @default("scheduled") // scheduled, active, completed, cancelled

  // Battle settings
  allowedShips String[] // Ship types allowed
  battleType String @default("port") // port, open-sea, raid
  weatherConditions String?
  timeOfDay String @default("day") // day, night, dawn, dusk

  // Organization
  createdBy String
  fleetCommander String?
  viceCommander String?

  // Discord integration
  discordChannelId String?
  discordMessageId String?
  voiceChannelId String?

  // Results
  outcome String? // victory, defeat, draw
  battleReport String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  creator User @relation("PortBattleCreator", fields: [createdBy], references: [id])
  signups PortBattleSignup[]
  screenings Screening[]

  @@map("port_battles")
}

model PortBattleSignup {
  id String @id @default(cuid())
  portBattleId String
  userId String
  shipType String
  shipName String?
  role String @default("crew") // crew, officer, commander
  status String @default("confirmed") // confirmed, waitlist, declined
  notes String?
  signupTime DateTime @default(now())

  // Attendance tracking
  attended Boolean?
  attendanceNotes String?

  // Relationships
  portBattle PortBattle @relation(fields: [portBattleId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([portBattleId, userId])
  @@map("port_battle_signups")
}

// Screening system for new recruits
model Screening {
  id String @id @default(cuid())
  portBattleId String
  title String
  description String?
  maxParticipants Int @default(10)
  requiredRank String? // Minimum rank required

  // Screening specific settings
  isBeginnerFriendly Boolean @default(true)
  focusAreas String[] // gunnery, sailing, tactics, etc.
  instructors String[] // User IDs of assigned instructors

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  portBattle PortBattle @relation(fields: [portBattleId], references: [id], onDelete: Cascade)
  signups ScreeningSignup[]

  @@map("screenings")
}

model ScreeningSignup {
  id String @id @default(cuid())
  screeningId String
  userId String
  experience String? // Brief description of player experience
  goals String? // What they want to learn
  status String @default("registered") // registered, attended, no-show
  feedback String? // Post-screening feedback
  rating Int? // 1-5 instructor rating

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  screening Screening @relation(fields: [screeningId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([screeningId, userId])
  @@map("screening_signups")
}

// Command structure and fleet organization
model CommandStructure {
  id String @id @default(cuid())
  name String @unique
  description String?
  isActive Boolean @default(true)
  structure Json // Hierarchical command structure as JSON

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relationships
  roles CommandStructureRole[]

  @@map("command_structures")
}

model CommandStructureRole {
  id String @id @default(cuid())
  commandStructureId String
  userId String
  position String // Admiral, Captain, Lieutenant, etc.
  responsibilities String[]
  appointedAt DateTime @default(now())

  // Relationships
  commandStructure CommandStructure @relation(fields: [commandStructureId], references: [id], onDelete: Cascade)
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([commandStructureId, position])
  @@map("command_structure_roles")
}

// User strikes and disciplinary system
model UserStrike {
  id String @id @default(cuid())
  userId String
  reason String
  description String?
  severity String @default("minor") // minor, major, severe
  issuedBy String
  issuedAt DateTime @default(now())
  expiresAt DateTime?
  isActive Boolean @default(true)

  // Relationships
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_strikes")
}
