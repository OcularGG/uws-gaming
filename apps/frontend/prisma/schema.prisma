generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                                                String                 @id @default(cuid())
  email                                             String                 @unique
  username                                          String                 @unique
  discordId                                         String?                @unique
  redditUsername                                    String?
  steamUsername                                     String?
  avatar                                            String?
  isBlacklisted                                     Boolean                @default(false)
  blacklistReason                                   String?
  createdAt                                         DateTime               @default(now())
  updatedAt                                         DateTime               @updatedAt
  album_members                                     album_members[]
  albums                                            albums[]
  application_comments                              application_comments[]
  applications                                      Application[]
  friend_requests_friend_requests_receiverIdTousers friend_requests[]      @relation("friend_requests_receiverIdTousers")
  friend_requests_friend_requests_senderIdTousers   friend_requests[]      @relation("friend_requests_senderIdTousers")
  friends_friends_friendIdTousers                   friends[]              @relation("friends_friendIdTousers")
  friends_friends_userIdTousers                     friends[]              @relation("friends_userIdTousers")
  gallery_comments                                  gallery_comments[]
  gallery_items                                     GalleryItem[]
  gallery_reactions                                 gallery_reactions[]
  sessions                                          Session[]
  activities                                        UserActivity[]
  userRoles                                         UserRole[]

  @@map("users")
}

model Role {
  id          String     @id @default(cuid())
  name        String     @unique
  description String?
  permissions Json       @default("[]")
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  userRoles   UserRole[]

  @@map("roles")
}

model UserRole {
  id     String @id @default(cuid())
  userId String
  roleId String
  role   Role   @relation(fields: [roleId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, roleId])
  @@map("user_roles")
}

model UserActivity {
  id        String           @id @default(cuid())
  userId    String
  type      UserActivityType
  data      Json             @default("{}")
  ipAddress String?
  userAgent String?
  createdAt DateTime         @default(now())
  user      User             @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_activities")
}

model Session {
  id        String   @id @default(cuid())
  userId    String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model Application {
  id                   String                 @id @default(cuid())
  userId               String?
  status               ApplicationStatus      @default(DRAFT)
  formData             Json                   @default("{}")
  lastSaved            DateTime               @default(now())
  submittedAt          DateTime?
  reviewedAt           DateTime?
  reviewedBy           String?
  notes                String?
  createdAt            DateTime               @default(now())
  updatedAt            DateTime               @updatedAt
  application_comments application_comments[]
  users                User?                  @relation(fields: [userId], references: [id])

  @@map("applications")
}

model GalleryItem {
  id                  String              @id @default(cuid())
  userId              String
  title               String
  description         String?
  imageUrl            String
  thumbnailUrl        String?
  isPublic            Boolean             @default(false)
  requiresAuth        Boolean             @default(false)
  status              GalleryItemStatus   @default(PENDING)
  views               Int                 @default(0)
  isDuplicate         Boolean             @default(false)
  originalItemId      String?
  createdAt           DateTime            @default(now())
  updatedAt           DateTime            @updatedAt
  album_items         album_items[]
  gallery_comments    gallery_comments[]
  gallery_items       GalleryItem?        @relation("gallery_itemsTogallery_items", fields: [originalItemId], references: [id])
  other_gallery_items GalleryItem[]       @relation("gallery_itemsTogallery_items")
  users               User                @relation(fields: [userId], references: [id], onDelete: Cascade)
  gallery_reactions   gallery_reactions[]

  @@map("gallery_items")
}

model album_items {
  id            String      @id
  albumId       String
  galleryItemId String
  order         Int         @default(0)
  addedAt       DateTime    @default(now())
  albums        albums      @relation(fields: [albumId], references: [id], onDelete: Cascade)
  gallery_items GalleryItem @relation(fields: [galleryItemId], references: [id], onDelete: Cascade)

  @@unique([albumId, galleryItemId])
}

model album_members {
  id      String @id
  albumId String
  userId  String
  albums  albums @relation(fields: [albumId], references: [id], onDelete: Cascade)
  users   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([albumId, userId])
}

model albums {
  id            String          @id
  name          String
  description   String?
  isPublic      Boolean         @default(false)
  creatorId     String
  createdAt     DateTime        @default(now())
  updatedAt     DateTime
  album_items   album_items[]
  album_members album_members[]
  users         User            @relation(fields: [creatorId], references: [id], onDelete: Cascade)
}

model application_comments {
  id            String      @id
  applicationId String
  userId        String
  content       String
  isInternal    Boolean     @default(false)
  createdAt     DateTime    @default(now())
  applications  Application @relation(fields: [applicationId], references: [id], onDelete: Cascade)
  users         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model backup_logs {
  id           String       @id
  type         BackupType
  status       BackupStatus
  fileName     String?
  fileSize     BigInt?
  checksum     String?
  startedAt    DateTime     @default(now())
  completedAt  DateTime?
  errorMessage String?
}

model discord_guilds {
  id          String   @id
  name        String
  iconUrl     String?
  ownerId     String
  memberCount Int      @default(0)
  isActive    Boolean  @default(true)
  settings    Json     @default("{}")
  createdAt   DateTime @default(now())
  updatedAt   DateTime
}

model friend_requests {
  id                                      String              @id
  senderId                                String
  receiverId                              String
  status                                  FriendRequestStatus @default(PENDING)
  createdAt                               DateTime            @default(now())
  updatedAt                               DateTime
  users_friend_requests_receiverIdTousers User                @relation("friend_requests_receiverIdTousers", fields: [receiverId], references: [id], onDelete: Cascade)
  users_friend_requests_senderIdTousers   User                @relation("friend_requests_senderIdTousers", fields: [senderId], references: [id], onDelete: Cascade)

  @@unique([senderId, receiverId])
}

model friends {
  id                            String   @id
  userId                        String
  friendId                      String
  createdAt                     DateTime @default(now())
  users_friends_friendIdTousers User     @relation("friends_friendIdTousers", fields: [friendId], references: [id], onDelete: Cascade)
  users_friends_userIdTousers   User     @relation("friends_userIdTousers", fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, friendId])
}

model gallery_comments {
  id            String      @id
  galleryItemId String
  userId        String
  content       String
  createdAt     DateTime    @default(now())
  updatedAt     DateTime
  gallery_items GalleryItem @relation(fields: [galleryItemId], references: [id], onDelete: Cascade)
  users         User        @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model gallery_reactions {
  id            String      @id
  galleryItemId String
  userId        String
  emoji         String
  createdAt     DateTime    @default(now())
  gallery_items GalleryItem @relation(fields: [galleryItemId], references: [id], onDelete: Cascade)
  users         User        @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([galleryItemId, userId, emoji])
}

model rate_limits {
  id         String   @id
  identifier String
  endpoint   String
  count      Int      @default(1)
  resetTime  DateTime
  createdAt  DateTime @default(now())

  @@unique([identifier, endpoint])
}

model system_config {
  id          String   @id
  key         String   @unique
  value       String
  description String?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime
}

model system_logs {
  id        String   @id
  level     LogLevel
  category  String
  message   String
  data      Json     @default("{}")
  userId    String?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())
}

enum ApplicationStatus {
  DRAFT
  SUBMITTED
  UNDER_REVIEW
  APPROVED
  REJECTED
  WITHDRAWN
}

enum BackupStatus {
  RUNNING
  COMPLETED
  FAILED
}

enum BackupType {
  MANUAL
  SCHEDULED
  EMERGENCY
}

enum FriendRequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

enum GalleryItemStatus {
  PENDING
  APPROVED
  REJECTED
}

enum LogLevel {
  DEBUG
  INFO
  WARN
  ERROR
  CRITICAL
}

enum UserActivityType {
  LOGIN
  LOGOUT
  PASSWORD_CHANGE
  EMAIL_CHANGE
  PROFILE_UPDATE
  DISCORD_LINK
  DISCORD_UNLINK
  APPLICATION_START
  APPLICATION_SAVE
  APPLICATION_SUBMIT
  APPLICATION_VIEW
  GALLERY_UPLOAD
  GALLERY_VIEW
  GALLERY_LIKE
  GALLERY_COMMENT
  ADMIN_ACTION
  FRIEND_REQUEST_SENT
  FRIEND_REQUEST_ACCEPTED
  FRIEND_REQUEST_DECLINED
}
